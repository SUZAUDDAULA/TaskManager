// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.DAL;

namespace TaskManager.DAL.Migrations
{
    [DbContext(typeof(TMDbContext))]
    [Migration("20211229173022_user table update")]
    partial class usertableupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<string>("firstName");

                    b.Property<string>("gender");

                    b.Property<int?>("isActive");

                    b.Property<string>("lastName");

                    b.Property<bool>("receiveNewsLetters");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("eRPModuleId");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("eRPModuleId");

                    b.ToTable("ModuleAccessPages");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.Navbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("activeLi")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("controller")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("displayOrder");

                    b.Property<string>("imageClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<int?>("moduleId");

                    b.Property<string>("nameOption")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nameOptionBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("parentID");

                    b.Property<bool>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("moduleId");

                    b.ToTable("Navbars");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.TMModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("isTeam");

                    b.Property<string>("moduleName");

                    b.Property<string>("moduleNameBN");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("TMModules");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.UserAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isAccess");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("navbarId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("navbarId");

                    b.ToTable("UserAccessPages");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("userTypeNameBn")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("countryName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("countryNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("districtCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("districtName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("districtNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int>("divisionId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("divisionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("divisionName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("divisionNameBn");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.DivisionDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionDistrictName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("divisionDistrictNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("rangeMetroId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("rangeMetroId");

                    b.ToTable("DivisionDistricts");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.ManufactureInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManufactureName")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("Origin")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ManufactureInfos");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("occupationName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(180)");

                    b.Property<string>("occupationShortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.OccupationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("OccupationStatuses");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.PoliceThana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("divisionDistrictId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("isReportable")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("policeThanaName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("policeThanaNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<int?>("rangeMetroId");

                    b.Property<int?>("upazillaId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<int?>("zoneCircleId");

                    b.HasKey("Id");

                    b.HasIndex("divisionDistrictId");

                    b.HasIndex("rangeMetroId");

                    b.HasIndex("upazillaId");

                    b.HasIndex("zoneCircleId");

                    b.ToTable("PoliceThanas");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.PoliticalParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("PoliticalParties");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.RangeMetro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("rangeMetroName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("rangeMetroNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("RangeMetros");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("skillLevel");

                    b.Property<string>("skillName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.SpecialPrivilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("SpecialPrivileges");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Thana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("rangeMetroId");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("thanaCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("thanaName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("thanaNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.HasIndex("rangeMetroId");

                    b.ToTable("Thanas");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.TrainingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("trainingCategoryName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(220)");

                    b.Property<string>("trainingCategoryNameBn")
                        .HasColumnType("NVARCHAR(220)");

                    b.Property<string>("trainingCategoryShortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("TrainingCategories");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.TrainingInstitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("trainingInstituteName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(220)");

                    b.Property<string>("trainingInstituteNameBn")
                        .HasColumnType("NVARCHAR(220)");

                    b.Property<string>("trainingInstituteShortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("TrainingInstitutes");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.UnionWard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtsId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int>("thanaId");

                    b.Property<string>("unionCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("unionName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("unionNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtsId");

                    b.HasIndex("thanaId");

                    b.ToTable("UnionWards");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.ZoneCircle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("divisionDistrictId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("zoneName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("zoneNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.HasKey("Id");

                    b.HasIndex("divisionDistrictId");

                    b.ToTable("ZoneCircles");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.TaskData.ClientLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("clientLocationName")
                        .HasColumnType("NVARCHAR(300)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ClientLocations");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.TaskData.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("clientLocationId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<bool>("isActive");

                    b.Property<int?>("isDelete");

                    b.Property<string>("projectCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("projectName")
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<DateTime?>("startDate");

                    b.Property<string>("status")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("teamSize");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("clientLocationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskManager.DAL.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("TaskManager.DAL.Entity.Auth.TMModule", "eRPModule")
                        .WithMany()
                        .HasForeignKey("eRPModuleId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.Navbar", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Auth.TMModule", "module")
                        .WithMany()
                        .HasForeignKey("moduleId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Auth.UserAccessPage", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("TaskManager.DAL.Entity.Auth.Navbar", "navbar")
                        .WithMany()
                        .HasForeignKey("navbarId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.District", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Division", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.DivisionDistrict", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.RangeMetro", "rangeMetro")
                        .WithMany()
                        .HasForeignKey("rangeMetroId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.PoliceThana", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.DivisionDistrict", "divisionDistrict")
                        .WithMany()
                        .HasForeignKey("divisionDistrictId");

                    b.HasOne("TaskManager.DAL.Entity.Master.RangeMetro", "rangeMetro")
                        .WithMany()
                        .HasForeignKey("rangeMetroId");

                    b.HasOne("TaskManager.DAL.Entity.Master.Thana", "upazilla")
                        .WithMany()
                        .HasForeignKey("upazillaId");

                    b.HasOne("TaskManager.DAL.Entity.Master.ZoneCircle", "zoneCircle")
                        .WithMany()
                        .HasForeignKey("zoneCircleId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Skill", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.Thana", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("TaskManager.DAL.Entity.Master.RangeMetro", "rangeMetro")
                        .WithMany()
                        .HasForeignKey("rangeMetroId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.UnionWard", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.District", "districts")
                        .WithMany()
                        .HasForeignKey("districtsId");

                    b.HasOne("TaskManager.DAL.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.Master.ZoneCircle", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.Master.DivisionDistrict", "divisionDistrict")
                        .WithMany()
                        .HasForeignKey("divisionDistrictId");
                });

            modelBuilder.Entity("TaskManager.DAL.Entity.TaskData.Project", b =>
                {
                    b.HasOne("TaskManager.DAL.Entity.TaskData.ClientLocation", "clientLocation")
                        .WithMany()
                        .HasForeignKey("clientLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
